// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/* ===== Enums ===== */

enum Role {
  ADMIN
  STAFF
  MEMBER
}

enum ReservationStatus {
  PENDING
  APPROVED
  CANCELLED
  CONVERTED
}

enum LoanStatus {
  ACTIVE
  RETURNED
  OVERDUE
}

/* ===== Models ===== */

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  passwordHash  String
  fullName      String
  role          Role           @default(MEMBER)
  createdAt     DateTime       @default(now())
  reservations  Reservation[]
  loans         Loan[]
  refreshTokens RefreshToken[]
}

model Item {
  id            Int            @id @default(autoincrement())
  name          String
  code          String         @unique
  category      String
  conditionNote String?
  available     Boolean        @default(true)
  createdAt     DateTime       @default(now())
  reservations  Reservation[]
  loans         Loan[]
  labels        ItemLabel[]

  @@index([category], map: "idx_items_category")
}

model Reservation {
  id        Int                @id @default(autoincrement())
  user      User               @relation(fields: [userId], references: [id])
  userId    Int
  item      Item               @relation(fields: [itemId], references: [id])
  itemId    Int
  startDate DateTime
  endDate   DateTime
  status    ReservationStatus  @default(PENDING)
  createdAt DateTime           @default(now())
  loan      Loan?

  // for overlap queries
  @@index([itemId, startDate, endDate], map: "idx_res_item_date")
}

model Loan {
  id            Int        @id @default(autoincrement())
  reservation   Reservation? @relation(fields: [reservationId], references: [id])
  reservationId Int?       @unique
  user          User       @relation(fields: [userId], references: [id])
  userId        Int
  item          Item       @relation(fields: [itemId], references: [id])
  itemId        Int
  checkoutAt    DateTime
  dueAt         DateTime
  returnedAt    DateTime?
  status        LoanStatus @default(ACTIVE)

  @@index([status], map: "idx_loans_status")
  @@index([userId], map: "idx_loans_user")
}

model Label {
  id    Int        @id @default(autoincrement())
  name  String     @unique
  items ItemLabel[]
}

model ItemLabel {
  item    Item  @relation(fields: [itemId], references: [id])
  itemId  Int
  label   Label @relation(fields: [labelId], references: [id])
  labelId Int

  @@id([itemId, labelId]) // composite primary key
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  tokenHash String
  createdAt DateTime @default(now())

  @@unique([userId, tokenHash], map: "uk_user_token")
}

